// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/role/ensure.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecases/role/ensure.go -destination=internal/usecases/role/mocks/ensure.go
//

// Package mock_role is a generated GoMock package.
package mock_role

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEnsureUseCase is a mock of EnsureUseCase interface.
type MockEnsureUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockEnsureUseCaseMockRecorder
	isgomock struct{}
}

// MockEnsureUseCaseMockRecorder is the mock recorder for MockEnsureUseCase.
type MockEnsureUseCaseMockRecorder struct {
	mock *MockEnsureUseCase
}

// NewMockEnsureUseCase creates a new mock instance.
func NewMockEnsureUseCase(ctrl *gomock.Controller) *MockEnsureUseCase {
	mock := &MockEnsureUseCase{ctrl: ctrl}
	mock.recorder = &MockEnsureUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnsureUseCase) EXPECT() *MockEnsureUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockEnsureUseCase) Execute(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockEnsureUseCaseMockRecorder) Execute(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockEnsureUseCase)(nil).Execute), arg0)
}
