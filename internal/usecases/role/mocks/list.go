// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/role/list.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecases/role/list.go -destination=internal/usecases/role/mocks/list.go
//

// Package mock_role is a generated GoMock package.
package mock_role

import (
	context "context"
	reflect "reflect"

	role "github.com/tapiaw38/auth-api-be/internal/usecases/role"
	gomock "go.uber.org/mock/gomock"
)

// MockListUsecase is a mock of ListUsecase interface.
type MockListUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockListUsecaseMockRecorder
	isgomock struct{}
}

// MockListUsecaseMockRecorder is the mock recorder for MockListUsecase.
type MockListUsecaseMockRecorder struct {
	mock *MockListUsecase
}

// NewMockListUsecase creates a new mock instance.
func NewMockListUsecase(ctrl *gomock.Controller) *MockListUsecase {
	mock := &MockListUsecase{ctrl: ctrl}
	mock.recorder = &MockListUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListUsecase) EXPECT() *MockListUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockListUsecase) Execute(arg0 context.Context, arg1 role.ListFilterOptions) ([]role.RoleOutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].([]role.RoleOutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockListUsecaseMockRecorder) Execute(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockListUsecase)(nil).Execute), arg0, arg1)
}
