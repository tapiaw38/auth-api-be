// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/role/update.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecases/role/update.go -destination=internal/usecases/role/mocks/update.go
//

// Package mock_role is a generated GoMock package.
package mock_role

import (
	context "context"
	reflect "reflect"

	role "github.com/tapiaw38/auth-api-be/internal/usecases/role"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateUsecase is a mock of UpdateUsecase interface.
type MockUpdateUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateUsecaseMockRecorder
	isgomock struct{}
}

// MockUpdateUsecaseMockRecorder is the mock recorder for MockUpdateUsecase.
type MockUpdateUsecaseMockRecorder struct {
	mock *MockUpdateUsecase
}

// NewMockUpdateUsecase creates a new mock instance.
func NewMockUpdateUsecase(ctrl *gomock.Controller) *MockUpdateUsecase {
	mock := &MockUpdateUsecase{ctrl: ctrl}
	mock.recorder = &MockUpdateUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateUsecase) EXPECT() *MockUpdateUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUpdateUsecase) Execute(arg0 context.Context, arg1 string, arg2 role.UpdateInput) (*role.UpdateOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].(*role.UpdateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockUpdateUsecaseMockRecorder) Execute(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateUsecase)(nil).Execute), arg0, arg1, arg2)
}
