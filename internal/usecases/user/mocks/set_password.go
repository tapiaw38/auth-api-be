// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/user/set_password.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	user "github.com/tapiaw38/auth-api-be/internal/usecases/user"
)

// MockSetPasswordUsecase is a mock of SetPasswordUsecase interface.
type MockSetPasswordUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSetPasswordUsecaseMockRecorder
}

// MockSetPasswordUsecaseMockRecorder is the mock recorder for MockSetPasswordUsecase.
type MockSetPasswordUsecaseMockRecorder struct {
	mock *MockSetPasswordUsecase
}

// NewMockSetPasswordUsecase creates a new mock instance.
func NewMockSetPasswordUsecase(ctrl *gomock.Controller) *MockSetPasswordUsecase {
	mock := &MockSetPasswordUsecase{ctrl: ctrl}
	mock.recorder = &MockSetPasswordUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSetPasswordUsecase) EXPECT() *MockSetPasswordUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSetPasswordUsecase) Execute(arg0 context.Context, arg1 user.SetPasswordInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSetPasswordUsecaseMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSetPasswordUsecase)(nil).Execute), arg0, arg1)
}
